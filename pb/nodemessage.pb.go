// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: pb/nodemessage.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE       MessageType = 0 // Placeholder, do not use or change
	MessageType_VOTE                                      MessageType = 1
	MessageType_I_HAVE_BLOCK_PROPOSAL                     MessageType = 2
	MessageType_REQUEST_BLOCK_PROPOSAL                    MessageType = 3
	MessageType_REQUEST_BLOCK_PROPOSAL_REPLY              MessageType = 4
	MessageType_GET_CONSENSUS_STATE                       MessageType = 5
	MessageType_GET_CONSENSUS_STATE_REPLY                 MessageType = 6
	MessageType_GET_BLOCK_HEADERS                         MessageType = 7
	MessageType_GET_BLOCK_HEADERS_REPLY                   MessageType = 8
	MessageType_GET_BLOCKS                                MessageType = 9
	MessageType_GET_BLOCKS_REPLY                          MessageType = 10
	MessageType_RELAY                                     MessageType = 11
	MessageType_TRANSACTIONS                              MessageType = 12
	MessageType_BACKTRACK_SIGNATURE_CHAIN                 MessageType = 13
	MessageType_REQUEST_PROPOSAL_TRANSACTIONS             MessageType = 14
	MessageType_REQUEST_PROPOSAL_TRANSACTIONS_REPLY       MessageType = 15
	MessageType_I_HAVE_SIGNATURE_CHAIN_TRANSACTION        MessageType = 16
	MessageType_REQUEST_SIGNATURE_CHAIN_TRANSACTION       MessageType = 17
	MessageType_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY MessageType = 18
	MessageType_PIN_SIGNATURE_CHAIN                       MessageType = 19
	MessageType_SIGNATURE_CHAIN_OBJECTION                 MessageType = 20
	MessageType_GET_STATES                                MessageType = 21
	MessageType_GET_STATES_REPLY                          MessageType = 22
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE",
		1:  "VOTE",
		2:  "I_HAVE_BLOCK_PROPOSAL",
		3:  "REQUEST_BLOCK_PROPOSAL",
		4:  "REQUEST_BLOCK_PROPOSAL_REPLY",
		5:  "GET_CONSENSUS_STATE",
		6:  "GET_CONSENSUS_STATE_REPLY",
		7:  "GET_BLOCK_HEADERS",
		8:  "GET_BLOCK_HEADERS_REPLY",
		9:  "GET_BLOCKS",
		10: "GET_BLOCKS_REPLY",
		11: "RELAY",
		12: "TRANSACTIONS",
		13: "BACKTRACK_SIGNATURE_CHAIN",
		14: "REQUEST_PROPOSAL_TRANSACTIONS",
		15: "REQUEST_PROPOSAL_TRANSACTIONS_REPLY",
		16: "I_HAVE_SIGNATURE_CHAIN_TRANSACTION",
		17: "REQUEST_SIGNATURE_CHAIN_TRANSACTION",
		18: "REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY",
		19: "PIN_SIGNATURE_CHAIN",
		20: "SIGNATURE_CHAIN_OBJECTION",
		21: "GET_STATES",
		22: "GET_STATES_REPLY",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE":       0,
		"VOTE":                                      1,
		"I_HAVE_BLOCK_PROPOSAL":                     2,
		"REQUEST_BLOCK_PROPOSAL":                    3,
		"REQUEST_BLOCK_PROPOSAL_REPLY":              4,
		"GET_CONSENSUS_STATE":                       5,
		"GET_CONSENSUS_STATE_REPLY":                 6,
		"GET_BLOCK_HEADERS":                         7,
		"GET_BLOCK_HEADERS_REPLY":                   8,
		"GET_BLOCKS":                                9,
		"GET_BLOCKS_REPLY":                          10,
		"RELAY":                                     11,
		"TRANSACTIONS":                              12,
		"BACKTRACK_SIGNATURE_CHAIN":                 13,
		"REQUEST_PROPOSAL_TRANSACTIONS":             14,
		"REQUEST_PROPOSAL_TRANSACTIONS_REPLY":       15,
		"I_HAVE_SIGNATURE_CHAIN_TRANSACTION":        16,
		"REQUEST_SIGNATURE_CHAIN_TRANSACTION":       17,
		"REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY": 18,
		"PIN_SIGNATURE_CHAIN":                       19,
		"SIGNATURE_CHAIN_OBJECTION":                 20,
		"GET_STATES":                                21,
		"GET_STATES_REPLY":                          22,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{0}
}

// Message type that can be signed message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedSignedMessageType int32

const (
	AllowedSignedMessageType_ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE AllowedSignedMessageType = 0 // Placeholder, do not use or change
)

// Enum value maps for AllowedSignedMessageType.
var (
	AllowedSignedMessageType_name = map[int32]string{
		0: "ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE",
	}
	AllowedSignedMessageType_value = map[string]int32{
		"ALLOW_SIGNED_PLACEHOLDER_DO_NOT_USE": 0,
	}
)

func (x AllowedSignedMessageType) Enum() *AllowedSignedMessageType {
	p := new(AllowedSignedMessageType)
	*p = x
	return p
}

func (x AllowedSignedMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedSignedMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[1].Descriptor()
}

func (AllowedSignedMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[1]
}

func (x AllowedSignedMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedSignedMessageType.Descriptor instead.
func (AllowedSignedMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{1}
}

// Message type that can be unsigned message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedUnsignedMessageType int32

const (
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE                    AllowedUnsignedMessageType = 0 // Placeholder, do not use or change
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_VOTE                                      AllowedUnsignedMessageType = 1
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_I_HAVE_BLOCK_PROPOSAL                     AllowedUnsignedMessageType = 2
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_BLOCK_PROPOSAL                    AllowedUnsignedMessageType = 3
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY                       AllowedUnsignedMessageType = 4
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_CONSENSUS_STATE                       AllowedUnsignedMessageType = 5
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_CONSENSUS_STATE_REPLY                 AllowedUnsignedMessageType = 6
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_BLOCK_HEADERS                         AllowedUnsignedMessageType = 7
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY                   AllowedUnsignedMessageType = 8
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_BLOCKS                                AllowedUnsignedMessageType = 9
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_BLOCKS_REPLY                          AllowedUnsignedMessageType = 10
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_RELAY                                     AllowedUnsignedMessageType = 11
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_TRANSACTIONS                              AllowedUnsignedMessageType = 12
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_BACKTRACK_SIGNATURE_CHAIN                 AllowedUnsignedMessageType = 13
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS             AllowedUnsignedMessageType = 14
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS_REPLY       AllowedUnsignedMessageType = 15
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_I_HAVE_SIGNATURE_CHAIN_TRANSACTION        AllowedUnsignedMessageType = 16
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION       AllowedUnsignedMessageType = 17
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY AllowedUnsignedMessageType = 18
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_PIN_SIGNATURE_CHAIN                       AllowedUnsignedMessageType = 19
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_SIGNATURE_CHAIN_OBJECTION                 AllowedUnsignedMessageType = 20
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_STATES                                AllowedUnsignedMessageType = 21
	AllowedUnsignedMessageType_ALLOW_UNSIGNED_GET_STATES_REPLY                          AllowedUnsignedMessageType = 22
)

// Enum value maps for AllowedUnsignedMessageType.
var (
	AllowedUnsignedMessageType_name = map[int32]string{
		0:  "ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE",
		1:  "ALLOW_UNSIGNED_VOTE",
		2:  "ALLOW_UNSIGNED_I_HAVE_BLOCK_PROPOSAL",
		3:  "ALLOW_UNSIGNED_REQUEST_BLOCK_PROPOSAL",
		4:  "ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY",
		5:  "ALLOW_UNSIGNED_GET_CONSENSUS_STATE",
		6:  "ALLOW_UNSIGNED_GET_CONSENSUS_STATE_REPLY",
		7:  "ALLOW_UNSIGNED_GET_BLOCK_HEADERS",
		8:  "ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY",
		9:  "ALLOW_UNSIGNED_GET_BLOCKS",
		10: "ALLOW_UNSIGNED_GET_BLOCKS_REPLY",
		11: "ALLOW_UNSIGNED_RELAY",
		12: "ALLOW_UNSIGNED_TRANSACTIONS",
		13: "ALLOW_UNSIGNED_BACKTRACK_SIGNATURE_CHAIN",
		14: "ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS",
		15: "ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS_REPLY",
		16: "ALLOW_UNSIGNED_I_HAVE_SIGNATURE_CHAIN_TRANSACTION",
		17: "ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION",
		18: "ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY",
		19: "ALLOW_UNSIGNED_PIN_SIGNATURE_CHAIN",
		20: "ALLOW_UNSIGNED_SIGNATURE_CHAIN_OBJECTION",
		21: "ALLOW_UNSIGNED_GET_STATES",
		22: "ALLOW_UNSIGNED_GET_STATES_REPLY",
	}
	AllowedUnsignedMessageType_value = map[string]int32{
		"ALLOW_UNSIGNED_PLACEHOLDER_DO_NOT_USE":                    0,
		"ALLOW_UNSIGNED_VOTE":                                      1,
		"ALLOW_UNSIGNED_I_HAVE_BLOCK_PROPOSAL":                     2,
		"ALLOW_UNSIGNED_REQUEST_BLOCK_PROPOSAL":                    3,
		"ALLOW_UNSIGNED_REQUEST_BLOCK_REPLY":                       4,
		"ALLOW_UNSIGNED_GET_CONSENSUS_STATE":                       5,
		"ALLOW_UNSIGNED_GET_CONSENSUS_STATE_REPLY":                 6,
		"ALLOW_UNSIGNED_GET_BLOCK_HEADERS":                         7,
		"ALLOW_UNSIGNED_GET_BLOCK_HEADERS_REPLY":                   8,
		"ALLOW_UNSIGNED_GET_BLOCKS":                                9,
		"ALLOW_UNSIGNED_GET_BLOCKS_REPLY":                          10,
		"ALLOW_UNSIGNED_RELAY":                                     11,
		"ALLOW_UNSIGNED_TRANSACTIONS":                              12,
		"ALLOW_UNSIGNED_BACKTRACK_SIGNATURE_CHAIN":                 13,
		"ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS":             14,
		"ALLOW_UNSIGNED_REQUEST_PROPOSAL_TRANSACTIONS_REPLY":       15,
		"ALLOW_UNSIGNED_I_HAVE_SIGNATURE_CHAIN_TRANSACTION":        16,
		"ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION":       17,
		"ALLOW_UNSIGNED_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY": 18,
		"ALLOW_UNSIGNED_PIN_SIGNATURE_CHAIN":                       19,
		"ALLOW_UNSIGNED_SIGNATURE_CHAIN_OBJECTION":                 20,
		"ALLOW_UNSIGNED_GET_STATES":                                21,
		"ALLOW_UNSIGNED_GET_STATES_REPLY":                          22,
	}
)

func (x AllowedUnsignedMessageType) Enum() *AllowedUnsignedMessageType {
	p := new(AllowedUnsignedMessageType)
	*p = x
	return p
}

func (x AllowedUnsignedMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedUnsignedMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[2].Descriptor()
}

func (AllowedUnsignedMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[2]
}

func (x AllowedUnsignedMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedUnsignedMessageType.Descriptor instead.
func (AllowedUnsignedMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{2}
}

// Message type that can be sent as direct message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedDirectMessageType int32

const (
	AllowedDirectMessageType_ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE                    AllowedDirectMessageType = 0 // Placeholder, do not use or change
	AllowedDirectMessageType_ALLOW_DIRECT_VOTE                                      AllowedDirectMessageType = 1
	AllowedDirectMessageType_ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL                     AllowedDirectMessageType = 2
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL                    AllowedDirectMessageType = 3
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_BLOCK_REPLY                       AllowedDirectMessageType = 4
	AllowedDirectMessageType_ALLOW_DIRECT_GET_CONSENSUS_STATE                       AllowedDirectMessageType = 5
	AllowedDirectMessageType_ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY                 AllowedDirectMessageType = 6
	AllowedDirectMessageType_ALLOW_DIRECT_GET_BLOCK_HEADERS                         AllowedDirectMessageType = 7
	AllowedDirectMessageType_ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY                   AllowedDirectMessageType = 8
	AllowedDirectMessageType_ALLOW_DIRECT_GET_BLOCKS                                AllowedDirectMessageType = 9
	AllowedDirectMessageType_ALLOW_DIRECT_GET_BLOCKS_REPLY                          AllowedDirectMessageType = 10
	AllowedDirectMessageType_ALLOW_DIRECT_BACKTRACK_SIGNATURE_CHAIN                 AllowedDirectMessageType = 13
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS             AllowedDirectMessageType = 14
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS_REPLY       AllowedDirectMessageType = 15
	AllowedDirectMessageType_ALLOW_DIRECT_I_HAVE_SIGNATURE_CHAIN_TRANSACTION        AllowedDirectMessageType = 16
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION       AllowedDirectMessageType = 17
	AllowedDirectMessageType_ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY AllowedDirectMessageType = 18
	AllowedDirectMessageType_ALLOW_DIRECT_PIN_SIGNATURE_CHAIN                       AllowedDirectMessageType = 19
	AllowedDirectMessageType_ALLOW_DIRECT_SIGNATURE_CHAIN_OBJECTION                 AllowedDirectMessageType = 20
	AllowedDirectMessageType_ALLOW_DIRECT_GET_STATES                                AllowedDirectMessageType = 21
	AllowedDirectMessageType_ALLOW_DIRECT_GET_STATES_REPLY                          AllowedDirectMessageType = 22
)

// Enum value maps for AllowedDirectMessageType.
var (
	AllowedDirectMessageType_name = map[int32]string{
		0:  "ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE",
		1:  "ALLOW_DIRECT_VOTE",
		2:  "ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL",
		3:  "ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL",
		4:  "ALLOW_DIRECT_REQUEST_BLOCK_REPLY",
		5:  "ALLOW_DIRECT_GET_CONSENSUS_STATE",
		6:  "ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY",
		7:  "ALLOW_DIRECT_GET_BLOCK_HEADERS",
		8:  "ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY",
		9:  "ALLOW_DIRECT_GET_BLOCKS",
		10: "ALLOW_DIRECT_GET_BLOCKS_REPLY",
		13: "ALLOW_DIRECT_BACKTRACK_SIGNATURE_CHAIN",
		14: "ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS",
		15: "ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS_REPLY",
		16: "ALLOW_DIRECT_I_HAVE_SIGNATURE_CHAIN_TRANSACTION",
		17: "ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION",
		18: "ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY",
		19: "ALLOW_DIRECT_PIN_SIGNATURE_CHAIN",
		20: "ALLOW_DIRECT_SIGNATURE_CHAIN_OBJECTION",
		21: "ALLOW_DIRECT_GET_STATES",
		22: "ALLOW_DIRECT_GET_STATES_REPLY",
	}
	AllowedDirectMessageType_value = map[string]int32{
		"ALLOW_DIRECT_PLACEHOLDER_DO_NOT_USE":                    0,
		"ALLOW_DIRECT_VOTE":                                      1,
		"ALLOW_DIRECT_I_HAVE_BLOCK_PROPOSAL":                     2,
		"ALLOW_DIRECT_REQUEST_BLOCK_PROPOSAL":                    3,
		"ALLOW_DIRECT_REQUEST_BLOCK_REPLY":                       4,
		"ALLOW_DIRECT_GET_CONSENSUS_STATE":                       5,
		"ALLOW_DIRECT_GET_CONSENSUS_STATE_REPLY":                 6,
		"ALLOW_DIRECT_GET_BLOCK_HEADERS":                         7,
		"ALLOW_DIRECT_GET_BLOCK_HEADERS_REPLY":                   8,
		"ALLOW_DIRECT_GET_BLOCKS":                                9,
		"ALLOW_DIRECT_GET_BLOCKS_REPLY":                          10,
		"ALLOW_DIRECT_BACKTRACK_SIGNATURE_CHAIN":                 13,
		"ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS":             14,
		"ALLOW_DIRECT_REQUEST_PROPOSAL_TRANSACTIONS_REPLY":       15,
		"ALLOW_DIRECT_I_HAVE_SIGNATURE_CHAIN_TRANSACTION":        16,
		"ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION":       17,
		"ALLOW_DIRECT_REQUEST_SIGNATURE_CHAIN_TRANSACTION_REPLY": 18,
		"ALLOW_DIRECT_PIN_SIGNATURE_CHAIN":                       19,
		"ALLOW_DIRECT_SIGNATURE_CHAIN_OBJECTION":                 20,
		"ALLOW_DIRECT_GET_STATES":                                21,
		"ALLOW_DIRECT_GET_STATES_REPLY":                          22,
	}
)

func (x AllowedDirectMessageType) Enum() *AllowedDirectMessageType {
	p := new(AllowedDirectMessageType)
	*p = x
	return p
}

func (x AllowedDirectMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedDirectMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[3].Descriptor()
}

func (AllowedDirectMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[3]
}

func (x AllowedDirectMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedDirectMessageType.Descriptor instead.
func (AllowedDirectMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{3}
}

// Message type that can be sent as relay message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedRelayMessageType int32

const (
	AllowedRelayMessageType_ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE AllowedRelayMessageType = 0 // Placeholder, do not use or change
	AllowedRelayMessageType_ALLOW_RELAY_RELAY                  AllowedRelayMessageType = 11
)

// Enum value maps for AllowedRelayMessageType.
var (
	AllowedRelayMessageType_name = map[int32]string{
		0:  "ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE",
		11: "ALLOW_RELAY_RELAY",
	}
	AllowedRelayMessageType_value = map[string]int32{
		"ALLOW_RELAY_PLACEHOLDER_DO_NOT_USE": 0,
		"ALLOW_RELAY_RELAY":                  11,
	}
)

func (x AllowedRelayMessageType) Enum() *AllowedRelayMessageType {
	p := new(AllowedRelayMessageType)
	*p = x
	return p
}

func (x AllowedRelayMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedRelayMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[4].Descriptor()
}

func (AllowedRelayMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[4]
}

func (x AllowedRelayMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedRelayMessageType.Descriptor instead.
func (AllowedRelayMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{4}
}

// Message type that can be sent as broadcast_push message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedBroadcastPushMessageType int32

const (
	AllowedBroadcastPushMessageType_ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPushMessageType = 0 // Placeholder, do not use or change
	AllowedBroadcastPushMessageType_ALLOW_BROADCAST_PUSH_TRANSACTIONS           AllowedBroadcastPushMessageType = 12
)

// Enum value maps for AllowedBroadcastPushMessageType.
var (
	AllowedBroadcastPushMessageType_name = map[int32]string{
		0:  "ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE",
		12: "ALLOW_BROADCAST_PUSH_TRANSACTIONS",
	}
	AllowedBroadcastPushMessageType_value = map[string]int32{
		"ALLOW_BROADCAST_PUSH_PLACEHOLDER_DO_NOT_USE": 0,
		"ALLOW_BROADCAST_PUSH_TRANSACTIONS":           12,
	}
)

func (x AllowedBroadcastPushMessageType) Enum() *AllowedBroadcastPushMessageType {
	p := new(AllowedBroadcastPushMessageType)
	*p = x
	return p
}

func (x AllowedBroadcastPushMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedBroadcastPushMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[5].Descriptor()
}

func (AllowedBroadcastPushMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[5]
}

func (x AllowedBroadcastPushMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedBroadcastPushMessageType.Descriptor instead.
func (AllowedBroadcastPushMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{5}
}

// Message type that can be sent as broadcast_pull message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedBroadcastPullMessageType int32

const (
	AllowedBroadcastPullMessageType_ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE AllowedBroadcastPullMessageType = 0 // Placeholder, do not use or change
)

// Enum value maps for AllowedBroadcastPullMessageType.
var (
	AllowedBroadcastPullMessageType_name = map[int32]string{
		0: "ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE",
	}
	AllowedBroadcastPullMessageType_value = map[string]int32{
		"ALLOW_BROADCAST_PULL_PLACEHOLDER_DO_NOT_USE": 0,
	}
)

func (x AllowedBroadcastPullMessageType) Enum() *AllowedBroadcastPullMessageType {
	p := new(AllowedBroadcastPullMessageType)
	*p = x
	return p
}

func (x AllowedBroadcastPullMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedBroadcastPullMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[6].Descriptor()
}

func (AllowedBroadcastPullMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[6]
}

func (x AllowedBroadcastPullMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedBroadcastPullMessageType.Descriptor instead.
func (AllowedBroadcastPullMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{6}
}

// Message type that can be sent as broadcast_tree message
// Name doesn't matter, but value needs to match the value in MessageType
type AllowedBroadcastTreeMessageType int32

const (
	AllowedBroadcastTreeMessageType_ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE AllowedBroadcastTreeMessageType = 0 // Placeholder, do not use or change
	AllowedBroadcastTreeMessageType_ALLOW_BROADCAST_TREE_TRANSACTIONS           AllowedBroadcastTreeMessageType = 12
)

// Enum value maps for AllowedBroadcastTreeMessageType.
var (
	AllowedBroadcastTreeMessageType_name = map[int32]string{
		0:  "ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE",
		12: "ALLOW_BROADCAST_TREE_TRANSACTIONS",
	}
	AllowedBroadcastTreeMessageType_value = map[string]int32{
		"ALLOW_BROADCAST_TREE_PLACEHOLDER_DO_NOT_USE": 0,
		"ALLOW_BROADCAST_TREE_TRANSACTIONS":           12,
	}
)

func (x AllowedBroadcastTreeMessageType) Enum() *AllowedBroadcastTreeMessageType {
	p := new(AllowedBroadcastTreeMessageType)
	*p = x
	return p
}

func (x AllowedBroadcastTreeMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedBroadcastTreeMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[7].Descriptor()
}

func (AllowedBroadcastTreeMessageType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[7]
}

func (x AllowedBroadcastTreeMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedBroadcastTreeMessageType.Descriptor instead.
func (AllowedBroadcastTreeMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{7}
}

type RequestTransactionType int32

const (
	RequestTransactionType_REQUEST_FULL_TRANSACTION       RequestTransactionType = 0
	RequestTransactionType_REQUEST_TRANSACTION_HASH       RequestTransactionType = 1
	RequestTransactionType_REQUEST_TRANSACTION_SHORT_HASH RequestTransactionType = 2
)

// Enum value maps for RequestTransactionType.
var (
	RequestTransactionType_name = map[int32]string{
		0: "REQUEST_FULL_TRANSACTION",
		1: "REQUEST_TRANSACTION_HASH",
		2: "REQUEST_TRANSACTION_SHORT_HASH",
	}
	RequestTransactionType_value = map[string]int32{
		"REQUEST_FULL_TRANSACTION":       0,
		"REQUEST_TRANSACTION_HASH":       1,
		"REQUEST_TRANSACTION_SHORT_HASH": 2,
	}
)

func (x RequestTransactionType) Enum() *RequestTransactionType {
	p := new(RequestTransactionType)
	*p = x
	return p
}

func (x RequestTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_nodemessage_proto_enumTypes[8].Descriptor()
}

func (RequestTransactionType) Type() protoreflect.EnumType {
	return &file_pb_nodemessage_proto_enumTypes[8]
}

func (x RequestTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestTransactionType.Descriptor instead.
func (RequestTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{8}
}

type UnsignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=pb.MessageType" json:"message_type,omitempty"`
	Message     []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnsignedMessage) Reset() {
	*x = UnsignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedMessage) ProtoMessage() {}

func (x *UnsignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedMessage.ProtoReflect.Descriptor instead.
func (*UnsignedMessage) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{0}
}

func (x *UnsignedMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_PLACEHOLDER_DO_NOT_USE
}

func (x *UnsignedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{1}
}

func (x *SignedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignedMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{2}
}

func (x *Vote) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Vote) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type IHaveBlockProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *IHaveBlockProposal) Reset() {
	*x = IHaveBlockProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IHaveBlockProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IHaveBlockProposal) ProtoMessage() {}

func (x *IHaveBlockProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IHaveBlockProposal.ProtoReflect.Descriptor instead.
func (*IHaveBlockProposal) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{3}
}

func (x *IHaveBlockProposal) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *IHaveBlockProposal) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type RequestBlockProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Type          RequestTransactionType `protobuf:"varint,2,opt,name=type,proto3,enum=pb.RequestTransactionType" json:"type,omitempty"`
	ShortHashSalt []byte                 `protobuf:"bytes,3,opt,name=short_hash_salt,json=shortHashSalt,proto3" json:"short_hash_salt,omitempty"`
	ShortHashSize uint32                 `protobuf:"varint,4,opt,name=short_hash_size,json=shortHashSize,proto3" json:"short_hash_size,omitempty"`
}

func (x *RequestBlockProposal) Reset() {
	*x = RequestBlockProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlockProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlockProposal) ProtoMessage() {}

func (x *RequestBlockProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlockProposal.ProtoReflect.Descriptor instead.
func (*RequestBlockProposal) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{4}
}

func (x *RequestBlockProposal) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *RequestBlockProposal) GetType() RequestTransactionType {
	if x != nil {
		return x.Type
	}
	return RequestTransactionType_REQUEST_FULL_TRANSACTION
}

func (x *RequestBlockProposal) GetShortHashSalt() []byte {
	if x != nil {
		return x.ShortHashSalt
	}
	return nil
}

func (x *RequestBlockProposal) GetShortHashSize() uint32 {
	if x != nil {
		return x.ShortHashSize
	}
	return 0
}

type RequestBlockProposalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block            *Block   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	TransactionsHash [][]byte `protobuf:"bytes,2,rep,name=transactions_hash,json=transactionsHash,proto3" json:"transactions_hash,omitempty"`
}

func (x *RequestBlockProposalReply) Reset() {
	*x = RequestBlockProposalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlockProposalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlockProposalReply) ProtoMessage() {}

func (x *RequestBlockProposalReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlockProposalReply.ProtoReflect.Descriptor instead.
func (*RequestBlockProposalReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{5}
}

func (x *RequestBlockProposalReply) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *RequestBlockProposalReply) GetTransactionsHash() [][]byte {
	if x != nil {
		return x.TransactionsHash
	}
	return nil
}

type RequestProposalTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash        []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Type             RequestTransactionType `protobuf:"varint,2,opt,name=type,proto3,enum=pb.RequestTransactionType" json:"type,omitempty"`
	ShortHashSalt    []byte                 `protobuf:"bytes,3,opt,name=short_hash_salt,json=shortHashSalt,proto3" json:"short_hash_salt,omitempty"`
	ShortHashSize    uint32                 `protobuf:"varint,4,opt,name=short_hash_size,json=shortHashSize,proto3" json:"short_hash_size,omitempty"`
	TransactionsHash [][]byte               `protobuf:"bytes,5,rep,name=transactions_hash,json=transactionsHash,proto3" json:"transactions_hash,omitempty"`
}

func (x *RequestProposalTransactions) Reset() {
	*x = RequestProposalTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestProposalTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProposalTransactions) ProtoMessage() {}

func (x *RequestProposalTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProposalTransactions.ProtoReflect.Descriptor instead.
func (*RequestProposalTransactions) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{6}
}

func (x *RequestProposalTransactions) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *RequestProposalTransactions) GetType() RequestTransactionType {
	if x != nil {
		return x.Type
	}
	return RequestTransactionType_REQUEST_FULL_TRANSACTION
}

func (x *RequestProposalTransactions) GetShortHashSalt() []byte {
	if x != nil {
		return x.ShortHashSalt
	}
	return nil
}

func (x *RequestProposalTransactions) GetShortHashSize() uint32 {
	if x != nil {
		return x.ShortHashSize
	}
	return 0
}

func (x *RequestProposalTransactions) GetTransactionsHash() [][]byte {
	if x != nil {
		return x.TransactionsHash
	}
	return nil
}

type RequestProposalTransactionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *RequestProposalTransactionsReply) Reset() {
	*x = RequestProposalTransactionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestProposalTransactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProposalTransactionsReply) ProtoMessage() {}

func (x *RequestProposalTransactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProposalTransactionsReply.ProtoReflect.Descriptor instead.
func (*RequestProposalTransactionsReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{7}
}

func (x *RequestProposalTransactionsReply) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetConsensusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConsensusState) Reset() {
	*x = GetConsensusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusState) ProtoMessage() {}

func (x *GetConsensusState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusState.ProtoReflect.Descriptor instead.
func (*GetConsensusState) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{8}
}

type GetConsensusStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerBlockHash     []byte    `protobuf:"bytes,2,opt,name=ledger_block_hash,json=ledgerBlockHash,proto3" json:"ledger_block_hash,omitempty"`
	LedgerHeight        uint32    `protobuf:"varint,1,opt,name=ledger_height,json=ledgerHeight,proto3" json:"ledger_height,omitempty"`
	ConsensusHeight     uint32    `protobuf:"varint,3,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	MinVerifiableHeight uint32    `protobuf:"varint,5,opt,name=min_verifiable_height,json=minVerifiableHeight,proto3" json:"min_verifiable_height,omitempty"`
	SyncState           SyncState `protobuf:"varint,4,opt,name=sync_state,json=syncState,proto3,enum=pb.SyncState" json:"sync_state,omitempty"`
}

func (x *GetConsensusStateReply) Reset() {
	*x = GetConsensusStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusStateReply) ProtoMessage() {}

func (x *GetConsensusStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusStateReply.ProtoReflect.Descriptor instead.
func (*GetConsensusStateReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{9}
}

func (x *GetConsensusStateReply) GetLedgerBlockHash() []byte {
	if x != nil {
		return x.LedgerBlockHash
	}
	return nil
}

func (x *GetConsensusStateReply) GetLedgerHeight() uint32 {
	if x != nil {
		return x.LedgerHeight
	}
	return 0
}

func (x *GetConsensusStateReply) GetConsensusHeight() uint32 {
	if x != nil {
		return x.ConsensusHeight
	}
	return 0
}

func (x *GetConsensusStateReply) GetMinVerifiableHeight() uint32 {
	if x != nil {
		return x.MinVerifiableHeight
	}
	return 0
}

func (x *GetConsensusStateReply) GetSyncState() SyncState {
	if x != nil {
		return x.SyncState
	}
	return SyncState_WAIT_FOR_SYNCING
}

type GetBlockHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetBlockHeaders) Reset() {
	*x = GetBlockHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaders) ProtoMessage() {}

func (x *GetBlockHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaders.ProtoReflect.Descriptor instead.
func (*GetBlockHeaders) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockHeaders) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlockHeaders) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetBlockHeadersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeaders []*Header `protobuf:"bytes,1,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
}

func (x *GetBlockHeadersReply) Reset() {
	*x = GetBlockHeadersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeadersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeadersReply) ProtoMessage() {}

func (x *GetBlockHeadersReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeadersReply.ProtoReflect.Descriptor instead.
func (*GetBlockHeadersReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{11}
}

func (x *GetBlockHeadersReply) GetBlockHeaders() []*Header {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

type GetBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHeight uint32 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint32 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetBlocks) Reset() {
	*x = GetBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocks) ProtoMessage() {}

func (x *GetBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocks.ProtoReflect.Descriptor instead.
func (*GetBlocks) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{12}
}

func (x *GetBlocks) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlocks) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetBlocksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetBlocksReply) Reset() {
	*x = GetBlocksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksReply) ProtoMessage() {}

func (x *GetBlocksReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksReply.ProtoReflect.Descriptor instead.
func (*GetBlocksReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{13}
}

func (x *GetBlocksReply) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type StateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *StateRequest) Reset() {
	*x = StateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRequest) ProtoMessage() {}

func (x *StateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRequest.ProtoReflect.Descriptor instead.
func (*StateRequest) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{14}
}

func (x *StateRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type StateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node []byte `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *StateNode) Reset() {
	*x = StateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateNode) ProtoMessage() {}

func (x *StateNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateNode.ProtoReflect.Descriptor instead.
func (*StateNode) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{15}
}

func (x *StateNode) GetNode() []byte {
	if x != nil {
		return x.Node
	}
	return nil
}

type GetStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs []*StateRequest `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *GetStates) Reset() {
	*x = GetStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStates) ProtoMessage() {}

func (x *GetStates) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStates.ProtoReflect.Descriptor instead.
func (*GetStates) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{16}
}

func (x *GetStates) GetReqs() []*StateRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type GetStatesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*StateNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetStatesReply) Reset() {
	*x = GetStatesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesReply) ProtoMessage() {}

func (x *GetStatesReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesReply.ProtoReflect.Descriptor instead.
func (*GetStatesReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{17}
}

func (x *GetStatesReply) GetNodes() []*StateNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIdentifier     string `protobuf:"bytes,1,opt,name=src_identifier,json=srcIdentifier,proto3" json:"src_identifier,omitempty"`
	SrcPubkey         []byte `protobuf:"bytes,6,opt,name=src_pubkey,json=srcPubkey,proto3" json:"src_pubkey,omitempty"`
	DestId            []byte `protobuf:"bytes,2,opt,name=dest_id,json=destId,proto3" json:"dest_id,omitempty"`
	Payload           []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	MaxHoldingSeconds uint32 `protobuf:"varint,5,opt,name=max_holding_seconds,json=maxHoldingSeconds,proto3" json:"max_holding_seconds,omitempty"`
	// It is important to use block hash instead of block height here to allow
	// node in syncing state to be able to sign the sigchain elem.
	BlockHash   []byte `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	LastHash    []byte `protobuf:"bytes,8,opt,name=last_hash,json=lastHash,proto3" json:"last_hash,omitempty"`
	SigChainLen uint32 `protobuf:"varint,9,opt,name=sig_chain_len,json=sigChainLen,proto3" json:"sig_chain_len,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{18}
}

func (x *Relay) GetSrcIdentifier() string {
	if x != nil {
		return x.SrcIdentifier
	}
	return ""
}

func (x *Relay) GetSrcPubkey() []byte {
	if x != nil {
		return x.SrcPubkey
	}
	return nil
}

func (x *Relay) GetDestId() []byte {
	if x != nil {
		return x.DestId
	}
	return nil
}

func (x *Relay) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Relay) GetMaxHoldingSeconds() uint32 {
	if x != nil {
		return x.MaxHoldingSeconds
	}
	return 0
}

func (x *Relay) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Relay) GetLastHash() []byte {
	if x != nil {
		return x.LastHash
	}
	return nil
}

func (x *Relay) GetSigChainLen() uint32 {
	if x != nil {
		return x.SigChainLen
	}
	return 0
}

type Transactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Transactions) Reset() {
	*x = Transactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transactions) ProtoMessage() {}

func (x *Transactions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transactions.ProtoReflect.Descriptor instead.
func (*Transactions) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{19}
}

func (x *Transactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BacktrackSignatureChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigChainElems []*SigChainElem `protobuf:"bytes,1,rep,name=sig_chain_elems,json=sigChainElems,proto3" json:"sig_chain_elems,omitempty"`
	Hash          []byte          `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BacktrackSignatureChain) Reset() {
	*x = BacktrackSignatureChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacktrackSignatureChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacktrackSignatureChain) ProtoMessage() {}

func (x *BacktrackSignatureChain) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacktrackSignatureChain.ProtoReflect.Descriptor instead.
func (*BacktrackSignatureChain) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{20}
}

func (x *BacktrackSignatureChain) GetSigChainElems() []*SigChainElem {
	if x != nil {
		return x.SigChainElems
	}
	return nil
}

func (x *BacktrackSignatureChain) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type IHaveSignatureChainTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height        uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	SignatureHash []byte `protobuf:"bytes,2,opt,name=signature_hash,json=signatureHash,proto3" json:"signature_hash,omitempty"`
}

func (x *IHaveSignatureChainTransaction) Reset() {
	*x = IHaveSignatureChainTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IHaveSignatureChainTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IHaveSignatureChainTransaction) ProtoMessage() {}

func (x *IHaveSignatureChainTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IHaveSignatureChainTransaction.ProtoReflect.Descriptor instead.
func (*IHaveSignatureChainTransaction) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{21}
}

func (x *IHaveSignatureChainTransaction) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *IHaveSignatureChainTransaction) GetSignatureHash() []byte {
	if x != nil {
		return x.SignatureHash
	}
	return nil
}

type RequestSignatureChainTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureHash []byte `protobuf:"bytes,1,opt,name=signature_hash,json=signatureHash,proto3" json:"signature_hash,omitempty"`
}

func (x *RequestSignatureChainTransaction) Reset() {
	*x = RequestSignatureChainTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSignatureChainTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSignatureChainTransaction) ProtoMessage() {}

func (x *RequestSignatureChainTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSignatureChainTransaction.ProtoReflect.Descriptor instead.
func (*RequestSignatureChainTransaction) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{22}
}

func (x *RequestSignatureChainTransaction) GetSignatureHash() []byte {
	if x != nil {
		return x.SignatureHash
	}
	return nil
}

type RequestSignatureChainTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *RequestSignatureChainTransactionReply) Reset() {
	*x = RequestSignatureChainTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSignatureChainTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSignatureChainTransactionReply) ProtoMessage() {}

func (x *RequestSignatureChainTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSignatureChainTransactionReply.ProtoReflect.Descriptor instead.
func (*RequestSignatureChainTransactionReply) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{23}
}

func (x *RequestSignatureChainTransactionReply) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type PinSignatureChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *PinSignatureChain) Reset() {
	*x = PinSignatureChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinSignatureChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinSignatureChain) ProtoMessage() {}

func (x *PinSignatureChain) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinSignatureChain.ProtoReflect.Descriptor instead.
func (*PinSignatureChain) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{24}
}

func (x *PinSignatureChain) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type SignatureChainObjectionUnsigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	SignatureHash  []byte `protobuf:"bytes,2,opt,name=signature_hash,json=signatureHash,proto3" json:"signature_hash,omitempty"`
	ReporterPubkey []byte `protobuf:"bytes,3,opt,name=reporter_pubkey,json=reporterPubkey,proto3" json:"reporter_pubkey,omitempty"`
}

func (x *SignatureChainObjectionUnsigned) Reset() {
	*x = SignatureChainObjectionUnsigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureChainObjectionUnsigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureChainObjectionUnsigned) ProtoMessage() {}

func (x *SignatureChainObjectionUnsigned) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureChainObjectionUnsigned.ProtoReflect.Descriptor instead.
func (*SignatureChainObjectionUnsigned) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{25}
}

func (x *SignatureChainObjectionUnsigned) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SignatureChainObjectionUnsigned) GetSignatureHash() []byte {
	if x != nil {
		return x.SignatureHash
	}
	return nil
}

func (x *SignatureChainObjectionUnsigned) GetReporterPubkey() []byte {
	if x != nil {
		return x.ReporterPubkey
	}
	return nil
}

type SignatureChainObjectionSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignatureChainObjectionSigned) Reset() {
	*x = SignatureChainObjectionSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_nodemessage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureChainObjectionSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureChainObjectionSigned) ProtoMessage() {}

func (x *SignatureChainObjectionSigned) ProtoReflect() protoreflect.Message {
	mi := &file_pb_nodemessage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureChainObjectionSigned.ProtoReflect.Descriptor instead.
func (*SignatureChainObjectionSigned) Descriptor() ([]byte, []int) {
	return file_pb_nodemessage_proto_rawDescGZIP(), []int{26}
}

func (x *SignatureChainObjectionSigned) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignatureChainObjectionSigned) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_pb_nodemessage_proto protoreflect.FileDescriptor

var file_pb_nodemessage_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0d, 0x70, 0x62, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x62, 0x2f, 0x73, 0x69,
	0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x62,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3d, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x12, 0x49,
	0x48, 0x61, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x69, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xe9, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x61,
	0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x57, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2c, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x53,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x33, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x1f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x90, 0x02, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x72, 0x63, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x22, 0x43, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x0d, 0x73,
	0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x5f, 0x0a, 0x1e, 0x49, 0x48, 0x61, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x49, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5a, 0x0a, 0x25,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x57, 0x0a,
	0x1d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x91, 0x05, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x5f, 0x48,
	0x41, 0x56, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41, 0x43, 0x4b, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x0d,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22,
	0x49, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x2d, 0x0a,
	0x29, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x49, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x53, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x16, 0x2a, 0x43, 0x0a, 0x18, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x2a,
	0xe3, 0x07, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x53, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0f, 0x12, 0x35,
	0x0a, 0x31, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x5f, 0x49, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x36, 0x0a, 0x32, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x3c, 0x0a,
	0x38, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x49,
	0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x10, 0x13, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x14, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x10, 0x15,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x16, 0x2a, 0xfc, 0x06, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44,
	0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x2a, 0x0a, 0x26, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12,
	0x28, 0x0a, 0x24, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x53, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x54, 0x52,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0f, 0x12, 0x33, 0x0a, 0x2f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x5f, 0x48, 0x41,
	0x56, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10,
	0x12, 0x34, 0x0a, 0x30, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x10,
	0x15, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x10, 0x16, 0x2a, 0x58, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x0b, 0x2a, 0x79,
	0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x2a, 0x52, 0x0a, 0x1f, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x2a, 0x79, 0x0a,
	0x1f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f,
	0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x2a, 0x78, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_nodemessage_proto_rawDescOnce sync.Once
	file_pb_nodemessage_proto_rawDescData = file_pb_nodemessage_proto_rawDesc
)

func file_pb_nodemessage_proto_rawDescGZIP() []byte {
	file_pb_nodemessage_proto_rawDescOnce.Do(func() {
		file_pb_nodemessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_nodemessage_proto_rawDescData)
	})
	return file_pb_nodemessage_proto_rawDescData
}

var file_pb_nodemessage_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_pb_nodemessage_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pb_nodemessage_proto_goTypes = []interface{}{
	(MessageType)(0),                              // 0: pb.MessageType
	(AllowedSignedMessageType)(0),                 // 1: pb.AllowedSignedMessageType
	(AllowedUnsignedMessageType)(0),               // 2: pb.AllowedUnsignedMessageType
	(AllowedDirectMessageType)(0),                 // 3: pb.AllowedDirectMessageType
	(AllowedRelayMessageType)(0),                  // 4: pb.AllowedRelayMessageType
	(AllowedBroadcastPushMessageType)(0),          // 5: pb.AllowedBroadcastPushMessageType
	(AllowedBroadcastPullMessageType)(0),          // 6: pb.AllowedBroadcastPullMessageType
	(AllowedBroadcastTreeMessageType)(0),          // 7: pb.AllowedBroadcastTreeMessageType
	(RequestTransactionType)(0),                   // 8: pb.RequestTransactionType
	(*UnsignedMessage)(nil),                       // 9: pb.UnsignedMessage
	(*SignedMessage)(nil),                         // 10: pb.SignedMessage
	(*Vote)(nil),                                  // 11: pb.Vote
	(*IHaveBlockProposal)(nil),                    // 12: pb.IHaveBlockProposal
	(*RequestBlockProposal)(nil),                  // 13: pb.RequestBlockProposal
	(*RequestBlockProposalReply)(nil),             // 14: pb.RequestBlockProposalReply
	(*RequestProposalTransactions)(nil),           // 15: pb.RequestProposalTransactions
	(*RequestProposalTransactionsReply)(nil),      // 16: pb.RequestProposalTransactionsReply
	(*GetConsensusState)(nil),                     // 17: pb.GetConsensusState
	(*GetConsensusStateReply)(nil),                // 18: pb.GetConsensusStateReply
	(*GetBlockHeaders)(nil),                       // 19: pb.GetBlockHeaders
	(*GetBlockHeadersReply)(nil),                  // 20: pb.GetBlockHeadersReply
	(*GetBlocks)(nil),                             // 21: pb.GetBlocks
	(*GetBlocksReply)(nil),                        // 22: pb.GetBlocksReply
	(*StateRequest)(nil),                          // 23: pb.StateRequest
	(*StateNode)(nil),                             // 24: pb.StateNode
	(*GetStates)(nil),                             // 25: pb.GetStates
	(*GetStatesReply)(nil),                        // 26: pb.GetStatesReply
	(*Relay)(nil),                                 // 27: pb.Relay
	(*Transactions)(nil),                          // 28: pb.Transactions
	(*BacktrackSignatureChain)(nil),               // 29: pb.BacktrackSignatureChain
	(*IHaveSignatureChainTransaction)(nil),        // 30: pb.IHaveSignatureChainTransaction
	(*RequestSignatureChainTransaction)(nil),      // 31: pb.RequestSignatureChainTransaction
	(*RequestSignatureChainTransactionReply)(nil), // 32: pb.RequestSignatureChainTransactionReply
	(*PinSignatureChain)(nil),                     // 33: pb.PinSignatureChain
	(*SignatureChainObjectionUnsigned)(nil),       // 34: pb.SignatureChainObjectionUnsigned
	(*SignatureChainObjectionSigned)(nil),         // 35: pb.SignatureChainObjectionSigned
	(*Block)(nil),                                 // 36: pb.Block
	(*Transaction)(nil),                           // 37: pb.Transaction
	(SyncState)(0),                                // 38: pb.SyncState
	(*Header)(nil),                                // 39: pb.Header
	(*SigChainElem)(nil),                          // 40: pb.SigChainElem
}
var file_pb_nodemessage_proto_depIdxs = []int32{
	0,  // 0: pb.UnsignedMessage.message_type:type_name -> pb.MessageType
	8,  // 1: pb.RequestBlockProposal.type:type_name -> pb.RequestTransactionType
	36, // 2: pb.RequestBlockProposalReply.block:type_name -> pb.Block
	8,  // 3: pb.RequestProposalTransactions.type:type_name -> pb.RequestTransactionType
	37, // 4: pb.RequestProposalTransactionsReply.transactions:type_name -> pb.Transaction
	38, // 5: pb.GetConsensusStateReply.sync_state:type_name -> pb.SyncState
	39, // 6: pb.GetBlockHeadersReply.block_headers:type_name -> pb.Header
	36, // 7: pb.GetBlocksReply.blocks:type_name -> pb.Block
	23, // 8: pb.GetStates.reqs:type_name -> pb.StateRequest
	24, // 9: pb.GetStatesReply.nodes:type_name -> pb.StateNode
	37, // 10: pb.Transactions.transactions:type_name -> pb.Transaction
	40, // 11: pb.BacktrackSignatureChain.sig_chain_elems:type_name -> pb.SigChainElem
	37, // 12: pb.RequestSignatureChainTransactionReply.transaction:type_name -> pb.Transaction
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pb_nodemessage_proto_init() }
func file_pb_nodemessage_proto_init() {
	if File_pb_nodemessage_proto != nil {
		return
	}
	file_pb_node_proto_init()
	file_pb_sigchain_proto_init()
	file_pb_block_proto_init()
	file_pb_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_nodemessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IHaveBlockProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlockProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlockProposalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestProposalTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestProposalTransactionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsensusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsensusStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeadersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BacktrackSignatureChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IHaveSignatureChainTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSignatureChainTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSignatureChainTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinSignatureChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureChainObjectionUnsigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_nodemessage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureChainObjectionSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_nodemessage_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_nodemessage_proto_goTypes,
		DependencyIndexes: file_pb_nodemessage_proto_depIdxs,
		EnumInfos:         file_pb_nodemessage_proto_enumTypes,
		MessageInfos:      file_pb_nodemessage_proto_msgTypes,
	}.Build()
	File_pb_nodemessage_proto = out.File
	file_pb_nodemessage_proto_rawDesc = nil
	file_pb_nodemessage_proto_goTypes = nil
	file_pb_nodemessage_proto_depIdxs = nil
}
